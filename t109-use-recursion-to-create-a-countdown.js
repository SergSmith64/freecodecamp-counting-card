// Use Recursion to Create a Countdown
// используйте рекурсию для создания обратного отсчета

// ЗДЕСЬ МНОГО ИНФЫ
// https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-use-recursion-to-create-a-countdown/305925/2


// Теперь давайте посмотрим на более сложную функцию, которая возвращает 
// массив последовательных целых чисел, начиная с 1 числа, переданного функции.

// Должен быть:
// Базовый случай сообщает рекурсивной функции, когда ей больше не нужно вызывать себя.
// Также будет рекурсивный вызов, который выполняет исходную функцию с другими 
// аргументами.

console.log("Hello");

// [ 1, 2, 3, 4, 5 ]
// console.log(countup(5));

// __ПЕРВОЕ РЕШЕНИЕ_--- САМОЕ ПРАВИЛЬНОЕ !!! ???

// function countdown(n) {
//   if (n < 1) {
//     return [];
//   } else {
//     const arr = countdown(n - 1);
//     arr.unshift(n);
//     return arr;
//   }
// }





// __ВТОРОЕ РЕШЕНИЕ_

// function countup(n) {
//   if (n < 1) {
//     return [];
//   } else {
//     const arr = countup(n - 1);
//     arr.splice(0, 0, n);
//     return arr;
//   }
// }

// _ТРЕТЬЕ РЕШЕНИЕ_
// function countup(n){
//   return n < 1 ? [] : [n].concat(countup(n - 1));
// }

// _ЧЕТВЕРТОЕ РЕШЕНИЕ_
// function countup(n){
//   return n < 1 ? [] : [n, ...countup(n - 1)];
// }

// console.log(countdown(4));



// Сначала это кажется нелогичным, поскольку значение n уменьшается, но значения 
// в конечном массиве увеличиваются. Это происходит потому, что нажатие происходит 
// последним, после возврата рекурсивного вызова. 
// В тот момент, когда n помещается в массив, countup(n - 1)уже был оценен 
// и возвращен [1, 2, ..., n - 1].

// Мы определили функцию, вызываемую countdown с одним параметром (n).
// Функция должна использовать рекурсию для возврата массива, содержащего целые числа, 
// n на 1 основе n параметра.
// Если функция вызывается с номером меньше 1, функция должна вернуть пустой массив.

// ЗАДАНИЕ:
// Написать вызов этой функции с помощью n = 5 должен вернуть массив [5, 4, 3, 2, 1].


// НОВОЕ ЗАДАНИЕ

// Мы определили функцию rangeOfNumbersс двумя параметрами. 
// Функция должна возвращать массив целых чисел, который начинается с числа, 
// представленного startNum параметром, и заканчивается числом, 
// представленным endNum параметром. 
// Начальный номер всегда будет меньше или равен конечному номеру.


function rangeOfNumbers(startNum, endNum) {
  if (startNum > endNum) {
    return [];
  } else {
    const arr = rangeOfNumbers(startNum + 1, endNum);
    arr.unshift(startNum);
    return arr;
  }
}
console.log(rangeOfNumbers(1, 5));



console.log("End");
